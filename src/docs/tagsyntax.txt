
Mark Logic XQuery Tag Library Syntax
------------------------------------

Until I find the cycles to write up a proper programmer's
guide for this tag library, this informal document will have
to serve as the documentation for the syntax of the XQ tags.

See also the the tutorial posted on the xq:zone Developer
Site (http://xqzone.marklogic.com/howto/) for explanation
of how to put the tags to use.  This document only lists
the tag names, the atrributes they take and how the tags
are allowed to nest.

See also the TLD descriptor file which is auto-generated
by the build from xdoclet tags in the source.


Tag syntax
----------

xq:setDataSource
	attributes
		var		container variable to set datasource to
				(default name used if not specified)
		scope		scope of var: page|request|session|application
		host		host name to connect to
		port		port on host
		dataSource	JNDI name of XDMPDataSource object
				(use dataSource, or host & port, not both)
		user		name of user on server
		password	password for user
	nestable tags
		xq:host		body is host name, or use initParameter attribute
		xq:port		body is port number, or use initParameter attribute
		xq:user		body is user name, or use initParameter attribute
		xq:password	body is password, or use initParameter attribute
		xq:dataSource	body is JNDI key, or use initParameter attribute

xq:unSetDataSource
	attributes
		var		container variable to clear
		scope		scope of var: page|request|session|application

xq:execute
	attributes
		var		container variable to set Result to
		scope		scope of var: page|request|session|application
		dataSource	container variable holding DataSource
				(default used if not specified)
		query		body of query to send
		module		name of module to invoke on server
		separator	String to place between each result item if
				the result is to be written out (var not given)
	nestable tags
		xq:query	body is arbitrary XQuery code to send
		xq:variable	body is variable value, attrs are namespace/localname/type
		xq:result	body evaluated for each result item

xq:query
	no attributes, body is arbitrary XQuery code

xq:variable
	attributes
		namespace	namespace URI (default = empty string namespace)
		localname	local name of variable to create
		type		type of variable (default xs:untypedAtomic)
				(XML Schema types)
		value		variable value as a string

xq:result
	attributes
		var		container variable to set current result Item to
		scope		scope of var: page|request|session|application
	nestable tags
		xq:streamItem	stringifies item and writes it to output

xq:streamItem
	attributes
		bufferSize	Size of intermediate buffer to use for read/write loop


Notes
-----

There are two modes of operation for these tags: buffered
and streaming.  Results are buffered if a "var" attribute names
a container variable to which the result should be assigned.  When
buffered, the entire result is read into memory.  The stored data
is then no longer dependent on an active XDBC connection.

If no "var" attribute is given, then the result streams to the
output.  This can happen implicitly, by not providing an xq:result,
or explicitly by using the xq:streamItem inside the xq:result tag.
Note that "var" on xq:execute and a nested xq:result tag are
mutually exclusive.

The "var" attribute when given on the xq:execute tag specifies
a variable to which an instance of the Result interface will be
assigned.  That object holds a sequence of ResultItem
objects.  When this attribute is given, a nested xq:result
may NOT be used.

When present, the body of the xq:result tag is iterated once
for each item in the sequence of result items.  It's possible
to have zero items in the sequence.  When not present, the
result data is streamed to the output in string form.

When "var" is specified on the xq:result tag, the variable will
be assigned an instance of the ResultItem interface on each
iteration (one iteration per item in the result sequence).  If
this attribute is specified it contains the buffered data of the
current result item.  The nested xq:streamItem tag my not be
used if the "var" attribute is specified.

The xq:streamItem tag, which is only valid inside xq:result,
streams the current result item to the output.  The main usage
of this tag is to decorate the item with additional data before
and/or after the item data.  The result item may be arbitrarily
large.  An optional buffer size attribute may be specified to
optimize the copy for special cases.


Tag Usage Examples
------------------

General form, using xq:result tag and buffered items
Body of xq:result runs once for each result in the sequence

<xq:execute dataSource="datasurce">
	<xq:query>
		for ...
		let ...
		where ...
		order by ...
		return ...
	</xq:query>

	<xq:variable namespace="nsURI" name="localname" type="XML Schema types no prefix">foo</xq:variable>

	<!-- May not be present if xq:execute@var is given -->
	<xq:result var="var-to-set-item-to" scope="scope-of-var-attr">
		<!-- JSTL or other tags can access buffered value of current
		     result item by the name given in "var" attribute -->
	</xq:result>
</xq:execute>


Explicit streaming using xq:result tag.  xq:streamItem may not be
used if xq:result@var is given.
Body of xq:result runs once for each result in the sequence

<xq:execute>
	<xq:query>
		for ...
		let ...
		return ...
	</xq:query>

	<xq:variable namespace="nsURI" name="localname" type="XML Schema types no prefix">foo</xq:variable>

	<!-- xq:streamItem tag may not be used if xq:result@var is given -->
	<xq:result>
		<xq:streamItem bufferSize="10000"/>
	</xq:result>
</xq:execute>


Run a query, stream result to output, replacing tag
Query specified as an attribute.  This is the most compact form.

<xq:execute query="..."/>


The above query is equivalent to:

<xq:execute>
	<xq:query>...</xq:query>
</xq:execute>


which is equivalent to:

<xq:execute>
	<xq:query>...</xq:query>
	<xq:result><xq:streamItem/></xq:result>
</xq:execute>


Same as above, naming a module

<xq:execute module="module-name"/>


Same as above, with parameters

<xq:execute module="module-name">
	<xq:variable namespace="nsURI" name="localname" type="XML Schema types no prefix">foo</xq:variable>
</xq:execute>


Run a query, using the named datasource, stream the result to
the output and separate each result item with the given string.
The separator is injected before each (possibly implicit) iteration
of the xq:result tag, except the first.

<xq:execute dataSource="ds" separator="|" query="..."/>


Same as above, naming a server-resident module (not yet implemented)

<xq:execute dataSource="ds" separator="|" module="module-name"/>


Run a query, set result (Result instance) in "var".
Query specified as an attribute.  The "var" will be set
to an instance of the Result interface (see below), which
encapsulates the entire, buffered result sequence.  This
variable remains set after execution of the tag completes
and no longer has any relationship to the XDBC call.

<xq:execute var="attr-to-receive-result" query="..."/>

Run a query, set result (Result instance) in "var".
Query specified in nested xq:query tag, with optional xq:variable tags

<xq:execute var="result">
	<xq:query>
		arbitrary XQuery code
	</xq:query>

	<!-- default type = untyped atomic, default ns = empty string ns -->
	<xq:variable namespace="nsURI" localname="name" type="some-data-type-name">value</xq:variable>
</xq:execute>


More complex example using JSTL control tags (c:xxx) to
access ResultItem fields.  This builds an HTML table and populates
the rows with the result data (see ResultItem interface below).

<xq:execute>
	<xq:query>
		for ...
		let ...
		return ...
	</xq:query>

	<table border="1" cellpadding="3" cellspacing="0">
	<tr><th>Position</th><th>Value</th><th>Node?</th></tr>

	<xq:result var="item">
		<tr>
			<td align="right"><c:out value="${item.index + 1}"/></td>
			<td><c:out value="${item.string}" escapeXml="false" /></td>
			<td align="center">
				<c:if test="${item.node == true}">Yes</c:if>
				<c:if test="${item.node == false}">No</c:if>
			</td>
		</tr>
	</xq:result>

	</table>
</xq:execute>


specify data source with attributes alone.  Var is optional, will use default

<xq:setDataSource var="foo" scope="page|request|session|application"
	host="hostname" port="1234" user="joe" password="secret"/>


specify datasource with JNDI key

<xq:setDataSource var="foo" scope="page|request|session|application"
	dataSource="java:com/env/xdbc/server"
	user="joe" password="secret"/>


specify data source with child elements

<xq:setDataSource var="foo" scope="page|request|session|application">
	<xq:host>hostname</xq:host>
	<xq:port>1234</xq:port>
	<xq:user>fred</xq:user>
	<xq:password>secret</xq:password>
	<xq:dataSource>java:com/env/xdbc/server</xq:dataSource>
</xq:dataSource>


specify data source with child elements naming web.xml config params

<xq:setDataSource var="foo" scope="page|request|session|application">
	<xq:host initParameter="cishostparam"/>
	<xq:port initParameter="cisportparam"/>
	<xq:user initParameter="cisuserparam"/>
	<xq:password initParameter="cispasswdparam"/>
	<xq:dataSource initParameter="cisdatasourceparam"/>
</xq:dataSource>


Clear datasource, using default var name if not specified
<xq:unSetDataSource var="foo" scope="page|request|session|application"/>


Java Interfaces used by the XQ tags
-----------------------------------

An instance of this may be set in "var" by the xq:execute tag

public interface Result
{
	int getSize();
	Item [] getItems();
	Item getItem (int index);
}


An instance of this may be set in "var" by the xq:result tag
public interface ResultItem
{
	int index;
	boolean isNode();
	Object getObject();
	String getString();
	Reader getReader();
	org.w3c.dom.Document getW3cDom() throws XDBCException;
	org.jdom.Document getJDom() throws XDBCException;
}

---
Rh 7/18/2004
Mark Logic Corporation
