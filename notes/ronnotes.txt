
# specify data source with attributes alone.  Var is optional, will use default
<xq:setDataSource var="foo" scope="page|request|session|application"
	host="hostname" port="1234" user="joe" password="secret"
	dataSource="java:com/env/xdbc/server" />

# specify data source with child elements
<xq:setDataSource var="foo" scope="page|request|session|application">
	<xq:host>hostname</xq:host>
	<xq:port>1234</xq:port>
	<xq:user>fred</xq:user>
	<xq:password>secret</xq:password>
	<xq:dataSource>java:com/env/xdbc/server</xq:dataSource>
</xq:dataSource>

# specify data source with child elements naming web.xml config params
<xq:setDataSource var="foo" scope="page|request|session|application">
	<xq:host initParameter="cishost"/>
	<xq:port initParameter="cisport"/>
	<xq:user initParameter="cisuser"/>
	<xq:password initParameter="cispasswd"/>
	<xq:dataSource initParameter="cisdatasource"/>
</xq:dataSource>

# Clear datasource, using default name if not specified
<xq:unSetDataSource var="foo" scope="page|request|session|application"/>

# Run a query, set result (ResultSequence) in "var".  DataSource name optional
# Query specified as an attribute.
<xq:query var="resultseq" dataSource="ds" separator="|" query="..."/>

# Run a query, set result (ResultSequence) in "var".  DataSource name optional
# Query specified given as the tag body, with embedded xq:escape tags
<xq:query dataSource="ds" separator="|" importModule="" importModuleNamespace="">
	...<xq:escape>something literal</xq:escape>...
	...<xq:escape escapeChars="()&">something else literal</xq:escape>...
</xq:query>

# Streaming, iterating query using statement/resultSequence tags
# Body of xq:resultSequence runs once for each result in the sequence
<xq:statement var="blah" dataSource="foo">
	<xq:query importModule="blah.xqy" importModuleNamespace="blither">
		for ...
		let ...
		return ...
	</xq:query>
	<xq:resultSequence var="attr-to-set-rs-to" name="attr-holding-existing-rs"
		scope="scope-of-name-param" loop="true|false">

		<xq:print/>
		<xq:asObject id="attr-to-set-seq-element-to" scope="scope-of-attr"/>
		<xq:asString id="attr-to-set-seq-element-to" scope="scope-of-attr"/>
		<xq:asReader id="attr-to-set-seq-element-to" scope="scope-of-attr"/>
		<xq:asDom id="attr-to-set-seq-element-to" scope="scope-of-attr"/>
		<xq:asJDom id="attr-to-set-seq-element-to" scope="scope-of-attr"/>

		<xq:isNode/>
		<xq:isNotNode/>
		<xq:getIndex zeroBased="true|false"/>
	</xq:resultSequence>
</xq:statement>

---

# An instance of this is set in "var" by the xq:query tag
public interface ResultSequence
{
	int getSize();
	Result [] getSequence();
	Result getResult (int index);
}

public interface Result
{
	boolean isNode();
	Object getObject();
	String getString();
	org.w3c.dom.Document getW3cDom() throws XDBCException;
	org.jdom.Document getJDom() throws XDBCException;
}
